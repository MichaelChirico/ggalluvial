% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/alluvial-data.r
\name{alluvial-data}
\alias{alluvial-data}
\alias{is_lodes_form}
\alias{is_alluvia_form}
\alias{to_lodes_form}
\alias{to_alluvia_form}
\title{Test for alluvial structure and convert between alluvial formats}
\usage{
is_lodes_form(
  data,
  alluvia_from,
  axes_from,
  strata_from,
  key,
  value,
  id,
  y = NULL,
  silent = FALSE
)

is_alluvia_form(data, axes = NULL, y = NULL, silent = FALSE)

to_lodes_form(
  data,
  axes = NULL,
  y = NULL,
  alluvia_to = "alluvium",
  axes_to = "x",
  strata_to = "stratum",
  key = NULL,
  value = NULL,
  id = NULL,
  y_to = NULL,
  diffuse = FALSE,
  discern = FALSE
)

to_alluvia_form(
  data,
  alluvia_from,
  axes_from,
  strata_from,
  key,
  value,
  id,
  y = NULL,
  distill = FALSE
)
}
\arguments{
\item{data}{A data frame.}

\item{alluvia_from, axes_from, strata_from}{Columns---one each---containing the
alluvium (identifier), axis (key), and stratum (value) of each row,
analogous to \verb{id_cols,names_from,values_from} in \code{\link[tidyr:pivot_wider]{tidyr::pivot_wider()}}.}

\item{id, key, value}{Deprecated aliases for \verb{alluvia_*,axes_*,strata_*}. While
they still accept unquoted names, note that their \verb{*_to} replacements only
accept strings.}

\item{y}{Optional column containing alluvium heights (subject magnitudes).}

\item{silent}{Whether to print explanatory messages.}

\item{axes}{Columns containing the stratum (entry) of each alluvium (row) at
each axis (column), analogous to \code{cols} in \code{\link[tidyr:pivot_longer]{tidyr::pivot_longer()}}.}

\item{alluvia_to, axes_to, strata_to}{Strings---one each---specifying the names
of the columns to contain alluvia (identifiers), axes (keys), and strata
(values).}

\item{y_to}{A string specifying the name of the column to create from the
column(s) identified by \code{y}. If needed for multiple columns but not
provided, defaults to 'y'.}

\item{diffuse}{Fields of \code{data} to merge into the lengthened data, joining by
\code{alluvia_to}. They must be among the variables passed to \code{axes}.
Alternatively, a logical value indicating whether to merge all (\code{TRUE}) or
none (\code{FALSE}) of these variables.}

\item{discern}{Logical value indicating whether to suffix values of the
variables passed to \code{axes} that appear at more than one axis, in order to
distinguish their factor levels. This forces the levels of the combined
factor variable \code{strata_to} to be in the order of the axes.}

\item{distill}{A logical value indicating whether variables excluded from
\code{axes_from} and \code{strata_from} that vary within values of \code{alluvia_from}
should be included in the result. Alternatively, a function (or its name)
to be used to distill each such variable to a single value. In addition to
existing functions, \code{distill} accepts the character values \code{"first"} (used
if \code{distill} is \code{TRUE}), \code{"last"}, and \code{"most"} (which returns the first
modal value).}
}
\description{
The functions \verb{is_*_form()} determine whether a data frame is alluvial---that
it has either the id--key--value structure of lodes format or the tidy
properties of alluvia format. The functions \verb{to_*_form()} convert data from
one format to the other.
}
\details{
Alluvial plots consist of multiple horizontally-distributed columns (axes)
representing categorical variables, vertical divisions (strata) of these axes
representing these variables' values; and ribbons (alluvial flows) connecting
vertical subdivisions (lodes) within strata of adjacent axes, representing
subsets or amounts of observations that take the corresponding values of the
corresponding variables. \strong{ggalluvial} can generate an alluvial plot from
data in either of two recognized formats:
\itemize{
\item \strong{Lodes format} encodes \emph{one row per measurement} or \emph{one row per lode},
using an \code{id}--\code{key}--\code{value} structure: Each row contains the recorded
\code{value} of one measurement (the \code{key}) for one subject or cohort (the \code{id}).
Visually, the lode is the unique intersection of one alluvium (the \code{id}) and
one axis (the \code{key}) and belongs to a unique stratum (the \code{value}).
Additional columns may contain lode-level variables, including magnitudes and
weights.
\item \strong{Alluvia format} encodes \emph{one row per subject} or \emph{one row per alluvium},
using a \href{https://tidyr.tidyverse.org/}{tidy} structure: Each subject (or
cohort) has a row, each measurement has a column, and each measured value is
an entry. Additional columns may contain subject-level variables, including
magnitudes and weights; but lode-level magnitudes and weights may also be
encoded as column ranges having the same cardinality as those of the
measurements.
}

The functions \verb{is_*_form()} test for these structures. Both formats may
include missing values, by omission (lodes format) or as \code{NA}s (both). See
the primary vignette for several illustrations: \verb{vignette("ggalluvial)}.

The two formats are related by a specialized pair of pivot operations.
\code{to_lodes_form()} tests a data frame for alluvia format and then converts it
to lodes format; \code{to_alluvia_form()} does the reverse. Some information may
be lost under either operation, and the parameters \code{diffuse}, \code{discern}, and
\code{distill} give the user some control over how additional variables are
handled.
}
\examples{
# Titanic data in alluvia format
titanic_alluvia <- as.data.frame(Titanic)
head(titanic_alluvia)
is_alluvia_form(titanic_alluvia,
                y = "Freq")
# Titanic data in lodes format
titanic_lodes <- to_lodes_form(titanic_alluvia,
                               alluvia_to = "alluvium",
                               axes_to = "x",
                               strata_to = "stratum",
                               axes = c(Class, Age, Sex, Survived))
head(titanic_lodes)
is_lodes_form(titanic_lodes,
              alluvia_from = "alluvium",
              axes_from = "x",
              strata_from = "stratum",
              y = "Freq")
# again in lodes format, this time diffusing the `Class` variable
titanic_lodes2 <- to_lodes_form(titanic_alluvia,
                                alluvia_to = "passenger",
                                axes_to = "variable",
                                strata_to = "value",
                                axes = 1:3, diffuse = 1)
head(titanic_lodes2)
is_lodes_form(titanic_lodes2,
              alluvia_from = passenger,
              axes_from = variable,
              strata_from = value,
              y = Freq)
# once more in lodes format, this time specifying a `y` variable
titanic_lodes3 <- to_lodes_form(titanic_alluvia,
                                axes = 1:4,
                                alluvia_to = "passenger",
                                axes_to = "demographic",
                                strata_to = "value",
                                y = Freq,
                                y_to = "count")
head(titanic_lodes3)
is_lodes_form(titanic_lodes3,
              alluvia_from = passenger, axes_from = demographic,
              strata_from = value, y = count)

# curriculum data in lodes format
data(majors)
head(majors)
is_lodes_form(majors,
              alluvia_from = "student", axes_from = "semester",
              strata_from = "curriculum")
# curriculum data in alluvia format
majors_alluvia <- to_alluvia_form(majors,
                                  alluvia_from = "student",
                                  axes_from = "semester",
                                  strata_from = "curriculum")
head(majors_alluvia)
is_alluvia_form(majors_alluvia, tidyselect::starts_with("CURR"))

# distill variables that vary within `id` values
set.seed(1)
majors$hypo_grade <- LETTERS[sample(5, size = nrow(majors), replace = TRUE)]
majors_alluvia2 <- to_alluvia_form(majors,
                                   alluvia_from = "student",
                                   axes_from = "semester",
                                   strata_from = "curriculum",
                                   distill = "most")
head(majors_alluvia2)

# options to distinguish strata at different axes
gg <- ggplot(majors_alluvia,
             aes(axis1 = CURR1, axis2 = CURR7, axis3 = CURR13))
gg +
  geom_alluvium(aes(fill = as.factor(student)), width = 2/5, discern = TRUE) +
  geom_stratum(width = 2/5, discern = TRUE) +
  geom_text(stat = "stratum", discern = TRUE, aes(label = after_stat(stratum)))
gg +
  geom_alluvium(aes(fill = as.factor(student)), width = 2/5, discern = FALSE) +
  geom_stratum(width = 2/5, discern = FALSE) +
  geom_text(stat = "stratum", discern = FALSE, aes(label = after_stat(stratum)))
# warning when inappropriate
ggplot(majors[majors$semester \%in\% paste0("CURR", c(1, 7, 13)), ],
       aes(x = semester, stratum = curriculum, alluvium = student,
           label = curriculum)) +
  geom_alluvium(aes(fill = as.factor(student)), width = 2/5, discern = TRUE) +
  geom_stratum(width = 2/5, discern = TRUE) +
  geom_text(stat = "stratum", discern = TRUE)

# vaccination data in lodes format
data(vaccinations)
head(vaccinations)
is_lodes_form(vaccinations,
              alluvia_from = subject, axes_from = survey,
              strata_from = response, y = freq)
# vaccination data in alluvia format, with fixed `y`
head(to_alluvia_form(vaccinations,
                     alluvia_from = subject, axes_from = survey,
                     strata_from = response, y = freq))
# vaccination data in alluvial format, with variable `y`
set.seed(1)
vaccinations$perm <- sample(vaccinations$freq)
head(vaccinations)
head(to_alluvia_form(vaccinations,
                     alluvia_from = subject, axes_from = survey,
                     strata_from = response, y = perm))

\dontrun{
# refugee data in lodes format
refugees <- alluvial::Refugees
head(refugees)
is_lodes_form(refugees,
              alluvia_from = country, axes_from = year, strata_from = country,
              y = refugees)
# refugee data in alluvial format, without `y` values
to_alluvia_form(refugees,
                axes_from = year, alluvia_from = country, strata_from = country)
# refugee data in alluvial format, with variable `y` values
to_alluvia_form(refugees,
                axes_from = year,
                alluvia_from = country,
                strata_from = country,
                y = refugees) ->
  refugees_alluvia
print(refugees_alluvia)
# back to lodes format
head(to_lodes_form(refugees_alluvia,
                   axes = `2003`:`2013`, y = starts_with("refugees_"),
                   alluvia_to = "id", axes_to = "year", strata_to = "origin",
                   y_to = "count"), n = 12)
}
}
\seealso{
Other alluvial data operations: 
\code{\link{self-adjoin}}
}
\concept{alluvial data operations}
